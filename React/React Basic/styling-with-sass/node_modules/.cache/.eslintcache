[{"/Users/dayepark/Documents/dev/TIL/React/React Basic/styling-with-sass/src/index.js":"1","/Users/dayepark/Documents/dev/TIL/React/React Basic/styling-with-sass/src/reportWebVitals.js":"2","/Users/dayepark/Documents/dev/TIL/React/React Basic/styling-with-sass/src/App.js":"3","/Users/dayepark/Documents/dev/TIL/React/React Basic/styling-with-sass/src/components/Button.js":"4"},{"size":500,"mtime":1624258110736,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1624258110737,"results":"7","hashOfConfig":"6"},{"size":3204,"mtime":1624438258285,"results":"8","hashOfConfig":"6"},{"size":1587,"mtime":1624438147138,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"c4mstg",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"/Users/dayepark/Documents/dev/TIL/React/React Basic/styling-with-sass/src/index.js",[],["20","21"],"/Users/dayepark/Documents/dev/TIL/React/React Basic/styling-with-sass/src/reportWebVitals.js",[],"/Users/dayepark/Documents/dev/TIL/React/React Basic/styling-with-sass/src/App.js",[],"/Users/dayepark/Documents/dev/TIL/React/React Basic/styling-with-sass/src/components/Button.js",["22","23"],"// import React from 'react';\n// import './Button.scss';\n\n// function Button({ children }) {\n//   return <button className=\"Button\">{children}</button>;\n// }\n\n// export default Button;\n\n// ----------------------- //\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport './Button.scss';\n\nfunction Button({ children, size, color, outline, fullWidth }) {    // children, size라는 props를 설정. 이때, size는 large, medium, small \n\t\n\t{/* size로 받아온 값을 className에다 넣어줄건데, 이를 구현하기 위해서는 배열을 하나 만들고, 그 배열 안에 'Button'과 size를 넣고, 그리고 .join()메서드를 사용해서 공백(' ')을 가지고 조인시키면... e.g. 받아온 size 값이 'medium'이라고 가정하면 className은 \"Button medium\"이런식으로 형성될 것이다! */}\n\t{/* 옵션 2. 아니면은 템플릿 리터럴을 사용해서 className을 정해줘도 괜찮다. e.g. <button className={`Button ${size}`}> \n\t하지만! 나중에 size말고도 다른 props를 받아올 것을 계획하고 있다면 옵션 1.과 같이 배열을 만들어서 공백으로 join시키는 것을 추천! */}\n\t// return <button className={['Button', size].join(' ')}>{children}</button>;\n\n\t// classNames 라이브러리 사용시\n\treturn (\n\t\t<button className={classNames('Button', size, color, {outline, fullWidth})}>\n\t\t\t{children}\n\t\t</button>\n\t);\n}\n\nButton.defaultProps = {\n\tsize: 'medium',\n\tcolor: 'blue'\n};\n\nexport default Button;\n\n// ----------------------- //\n\n\n\n// ----------------------- //\n\n\n// ----------------------- //\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":18,"column":2,"nodeType":"30","messageId":"31","endLine":18,"endColumn":212},{"ruleId":"28","severity":1,"message":"29","line":19,"column":2,"nodeType":"30","messageId":"31","endLine":20,"endColumn":87},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]