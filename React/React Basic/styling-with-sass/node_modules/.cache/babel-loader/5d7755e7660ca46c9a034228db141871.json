{"ast":null,"code":"var _jsxFileName = \"/Users/dayepark/Documents/dev/TIL/React/React Basic/styling-with-sass/src/components/Button.js\";\n// import React from 'react';\n// import './Button.scss';\n// function Button({ children }) {\n//   return <button className=\"Button\">{children}</button>;\n// }\n// export default Button;\n// ----------------------- //\n// import React from 'react';\n// import classNames from 'classnames';\n// import './Button.scss';\n// function Button({ children, size, color, outline, fullWidth }) {    // children, size라는 props를 설정. 이때, size는 large, medium, small \n// \t{/* size로 받아온 값을 className에다 넣어줄건데, 이를 구현하기 위해서는 배열을 하나 만들고, 그 배열 안에 'Button'과 size를 넣고, 그리고 .join()메서드를 사용해서 공백(' ')을 가지고 조인시키면... e.g. 받아온 size 값이 'medium'이라고 가정하면 className은 \"Button medium\"이런식으로 형성될 것이다! */}\n// \t{/* 옵션 2. 아니면은 템플릿 리터럴을 사용해서 className을 정해줘도 괜찮다. e.g. <button className={`Button ${size}`}> \n// \t하지만! 나중에 size말고도 다른 props를 받아올 것을 계획하고 있다면 옵션 1.과 같이 배열을 만들어서 공백으로 join시키는 것을 추천! */}\n// \t// return <button className={['Button', size].join(' ')}>{children}</button>;\n// \t// classNames 라이브러리 사용시\n// \treturn (\n// \t\t<button className={classNames('Button', size, color, {outline, fullWidth})}>\n// \t\t\t{children}\n// \t\t</button>\n// \t);\n// }\n// Button.defaultProps = {\n// \tsize: 'medium',\n// \tcolor: 'blue'\n// };\n// export default Button;\n// ----------------------- //\nimport React from 'react';\nimport classNames from 'classnames';\nimport './Button.scss'; // function Button({ children, size, color, outline, fullWidth, onClick, onMouseMove }) {\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Button({\n  children,\n  size,\n  color,\n  outline,\n  fullWidth,\n  ...rest\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: classNames('Button', size, color, {\n      outline,\n      fullWidth\n    }),\n    ...rest,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Button;\nButton.defaultProps = {\n  size: 'medium',\n  color: 'blue'\n};\nexport default Button; // ----------------------- //\n// ----------------------- //\n// ----------------------- //\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/dayepark/Documents/dev/TIL/React/React Basic/styling-with-sass/src/components/Button.js"],"names":["React","classNames","Button","children","size","color","outline","fullWidth","rest","defaultProps"],"mappings":";AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,eAAP,C,CAEA;;;;AACA,SAASC,MAAT,CAAgB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA,KAAlB;AAAyBC,EAAAA,OAAzB;AAAkCC,EAAAA,SAAlC;AAA6C,KAAGC;AAAhD,CAAhB,EAAwE;AACtE,sBACE;AACE,IAAA,SAAS,EAAEP,UAAU,CAAC,QAAD,EAAWG,IAAX,EAAiBC,KAAjB,EAAwB;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAxB,CADvB;AAAA,OAEGC,IAFH;AAAA,cAMGL;AANH;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;KAXQD,M;AAaTA,MAAM,CAACO,YAAP,GAAsB;AACpBL,EAAAA,IAAI,EAAE,QADc;AAEpBC,EAAAA,KAAK,EAAE;AAFa,CAAtB;AAKA,eAAeH,MAAf,C,CAEA;AAGA;AAEA","sourcesContent":["// import React from 'react';\n// import './Button.scss';\n\n// function Button({ children }) {\n//   return <button className=\"Button\">{children}</button>;\n// }\n\n// export default Button;\n\n// ----------------------- //\n\n// import React from 'react';\n// import classNames from 'classnames';\n// import './Button.scss';\n\n// function Button({ children, size, color, outline, fullWidth }) {    // children, size라는 props를 설정. 이때, size는 large, medium, small \n\t\n// \t{/* size로 받아온 값을 className에다 넣어줄건데, 이를 구현하기 위해서는 배열을 하나 만들고, 그 배열 안에 'Button'과 size를 넣고, 그리고 .join()메서드를 사용해서 공백(' ')을 가지고 조인시키면... e.g. 받아온 size 값이 'medium'이라고 가정하면 className은 \"Button medium\"이런식으로 형성될 것이다! */}\n// \t{/* 옵션 2. 아니면은 템플릿 리터럴을 사용해서 className을 정해줘도 괜찮다. e.g. <button className={`Button ${size}`}> \n// \t하지만! 나중에 size말고도 다른 props를 받아올 것을 계획하고 있다면 옵션 1.과 같이 배열을 만들어서 공백으로 join시키는 것을 추천! */}\n// \t// return <button className={['Button', size].join(' ')}>{children}</button>;\n\n// \t// classNames 라이브러리 사용시\n// \treturn (\n// \t\t<button className={classNames('Button', size, color, {outline, fullWidth})}>\n// \t\t\t{children}\n// \t\t</button>\n// \t);\n// }\n\n// Button.defaultProps = {\n// \tsize: 'medium',\n// \tcolor: 'blue'\n// };\n\n// export default Button;\n\n// ----------------------- //\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport './Button.scss';\n\n// function Button({ children, size, color, outline, fullWidth, onClick, onMouseMove }) {\nfunction Button({ children, size, color, outline, fullWidth, ...rest }) {\n  return (\n    <button\n      className={classNames('Button', size, color, { outline, fullWidth })}\n\t\t\t{...rest}                // ...rest 문법으로  props 전달하기 \n      // onClick={onClick}\n      // onMouseMove={onMouseMove}\n    >\n      {children}\n    </button>\n  );\n}\n\nButton.defaultProps = {\n  size: 'medium',\n  color: 'blue'\n};\n\nexport default Button;\n\n// ----------------------- //\n\n\n// ----------------------- //\n\n// ----------------------- //\n"]},"metadata":{},"sourceType":"module"}