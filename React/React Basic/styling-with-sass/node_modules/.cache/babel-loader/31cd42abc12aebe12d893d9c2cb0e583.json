{"ast":null,"code":"var _jsxFileName = \"/Users/dayepark/Documents/dev/TIL/React/React Basic/styling-with-sass/src/components/Button.js\";\n// import React from 'react';\n// import './Button.scss';\n// function Button({ children }) {\n//   return <button className=\"Button\">{children}</button>;\n// }\n// export default Button;\n// ----------------------- //\nimport React from 'react';\nimport classNames from 'classnames';\nimport './Button.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Button({\n  children,\n  size,\n  color\n}) {\n  // children, size라는 props를 설정. 이때, size는 large, medium, small \n  {\n    /* size로 받아온 값을 className에다 넣어줄건데, 이를 구현하기 위해서는 배열을 하나 만들고, 그 배열 안에 'Button'과 size를 넣고, 그리고 .join()메서드를 사용해서 공백(' ')을 가지고 조인시키면... e.g. 받아온 size 값이 'medium'이라고 가정하면 className은 \"Button medium\"이런식으로 형성될 것이다! */\n  }\n  {\n    /* 옵션 2. 아니면은 템플릿 리터럴을 사용해서 className을 정해줘도 괜찮다. e.g. <button className={`Button ${size}`}> \n    하지만! 나중에 size말고도 다른 props를 받아올 것을 계획하고 있다면 옵션 1.과 같이 배열을 만들어서 공백으로 join시키는 것을 추천! */\n  } // return <button className={['Button', size].join(' ')}>{children}</button>;\n  // classNames 라이브러리 사용시\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: classNames('Button', size, color, {\n      outline\n    }),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 3\n  }, this);\n}\n\n_c = Button;\nButton.defaultProps = {\n  size: 'medium'\n};\nexport default Button; // ----------------------- //\n// ----------------------- //\n// ----------------------- //\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/dayepark/Documents/dev/TIL/React/React Basic/styling-with-sass/src/components/Button.js"],"names":["React","classNames","Button","children","size","color","outline","defaultProps"],"mappings":";AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,eAAP;;;AAEA,SAASC,MAAT,CAAgB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA;AAAlB,CAAhB,EAA2C;AAAK;AAE/C;AAAC;AAAiN;AAClN;AAAC;AACF;AAAsF,GAJ3C,CAK1C;AAEA;;AACA,sBACC;AAAQ,IAAA,SAAS,EAAEJ,UAAU,CAAC,QAAD,EAAWG,IAAX,EAAiBC,KAAjB,EAAwB;AAACC,MAAAA;AAAD,KAAxB,CAA7B;AAAA,cACCH;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;KAbQD,M;AAeTA,MAAM,CAACK,YAAP,GAAsB;AACrBH,EAAAA,IAAI,EAAE;AADe,CAAtB;AAIA,eAAeF,MAAf,C,CAEA;AAIA;AAGA","sourcesContent":["// import React from 'react';\n// import './Button.scss';\n\n// function Button({ children }) {\n//   return <button className=\"Button\">{children}</button>;\n// }\n\n// export default Button;\n\n// ----------------------- //\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport './Button.scss';\n\nfunction Button({ children, size, color }) {    // children, size라는 props를 설정. 이때, size는 large, medium, small \n\t\n\t{/* size로 받아온 값을 className에다 넣어줄건데, 이를 구현하기 위해서는 배열을 하나 만들고, 그 배열 안에 'Button'과 size를 넣고, 그리고 .join()메서드를 사용해서 공백(' ')을 가지고 조인시키면... e.g. 받아온 size 값이 'medium'이라고 가정하면 className은 \"Button medium\"이런식으로 형성될 것이다! */}\n\t{/* 옵션 2. 아니면은 템플릿 리터럴을 사용해서 className을 정해줘도 괜찮다. e.g. <button className={`Button ${size}`}> \n\t하지만! 나중에 size말고도 다른 props를 받아올 것을 계획하고 있다면 옵션 1.과 같이 배열을 만들어서 공백으로 join시키는 것을 추천! */}\n\t// return <button className={['Button', size].join(' ')}>{children}</button>;\n\n\t// classNames 라이브러리 사용시\n\treturn (\n\t\t<button className={classNames('Button', size, color, {outline})}>\n\t\t{children}\n\t\t</button>\n\t);\n}\n\nButton.defaultProps = {\n\tsize: 'medium'\n};\n\nexport default Button;\n\n// ----------------------- //\n\n\n\n// ----------------------- //\n\n\n// ----------------------- //\n"]},"metadata":{},"sourceType":"module"}